#include<vector>
#include<queue>

using namespace std;

int solution(vector<vector<int> > maps)
{
    vector<vector<int>> visit;
    vector<int> b;
    queue<pair<int, int>> q;

    for (int i = 0; i < maps.size(); i++)
    {
        b.clear();
        for (int j = 0; j < maps[i].size(); j++)
            b.push_back(0);
        visit.push_back(b);
    }

    q.push(make_pair(0, 0));
    visit[0][0] = 1;

    int g, s, count;
    while (!q.empty())
    {
        g = q.front().second;
        s = q.front().first;
        q.pop();

        //위
        if (s - 1 >= 0 && maps[s - 1][g] == 1 && visit[s - 1][g] == 0)
        {
            q.push(make_pair(s - 1, g));
            visit[s - 1][g] = visit[s][g] + 1;
        }

        //아래
        if (s + 1 < maps.size() && maps[s + 1][g] == 1 && visit[s + 1][g] == 0)
        {
            q.push(make_pair(s + 1, g));
            visit[s + 1][g] = visit[s][g] + 1;
        }

        //우
        if (g + 1 < maps[0].size() && maps[s][g + 1] == 1 && visit[s][g + 1] == 0)
        {
            q.push(make_pair(s, g + 1));
            visit[s][g + 1] = visit[s][g] + 1;
        }

        //좌
        if (g - 1 >= 0 && maps[s][g - 1] == 1 && visit[s][g - 1] == 0)
        {
            q.push(make_pair(s, g - 1));
            visit[s][g - 1] = visit[s][g] + 1;
        }
    }

    if (visit[maps.size() - 1][maps[0].size() - 1] == 0)
        return -1;
    else
        return visit[maps.size() - 1][maps[0].size() - 1];
}
